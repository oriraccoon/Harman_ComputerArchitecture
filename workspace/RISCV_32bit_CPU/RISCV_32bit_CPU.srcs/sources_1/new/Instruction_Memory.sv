module Instruction_Memory (
    input  logic [31:0] instr_mem_addr,
    output logic [31:0] instr_code
);
    
    logic [31:0] rom[0:15];

    initial begin
        // rom[x] = 32'b func7 _ rs2 _ rs1 _ func3 _ rd _ opcode;   // R-Type
        // rom[x] = 32'b imm12 _ rs1 _ func3 _ rd _ opcode;   // L-Type
        // rom[x] = 32'b imm12 _ rs1 _ func3 _ rd _ opcode;   // I-Type
        // rom[x] = 32'b func7 _ shamt _ rs1 _ func3 _ rd _ opcode;   // I-Type
        // rom[x] = 32'b imm7 _ rs2 _ rs1 _ f3 _ imm5 _ opcode;     // S-Type
        // rom[x] = 32'b imm7 _ rs2 _ rs1 _ f3 _ imm5 _ opcode;     // B-Type
        // rom[x] = 32'b imm20 _ rd _ opcode;     // LU_TYPE
        // rom[x] = 32'b imm20 _ rd _ opcode;     // AU_TYPE
        // rom[x] = 32'b imm[20][10:1][11][19:12] _ rd _ opcode;     // J_TYPE
        // rom[x] = 32'b imm12 _ rs1 _ f3 _ rd _ opcode;     // JL_TYPE

        /*
        rom[0] = 32'b0000000_00001_00010_000_00100_0110011; // add x4, x2, x1       
        rom[1] = 32'b0100000_00001_00010_000_00101_0110011; // sub x5, x2, x1       

        rom[2] = 32'b0000000_00010_00000_010_01000_0100011; // sw x2, 8(x0);        

        rom[3] = 32'b000000010000_00000_010_00011_0000011; // lw x3, 16, x0;        
        // rom[4] = 32'b000000010000_00000_000_00111_0000011; // lb x7, 16, x0;        
        // rom[5] = 32'b000000110000_00000_000_01000_0010011; // ADDI x8, 48, x0;      
        rom[8] = 32'b000000110000_00010_100_01011_0010011; // XORI x11, 48, x2;     
        rom[9] = 32'b000000110000_00010_110_01100_0010011; // ORI x12, 48, x2;      
        rom[10] = 32'b000000110000_00010_111_01101_0010011; // ANDI x13, 48, x2;    
        rom[11] = 32'b0000000_00001_01110_001_01110_0010011; // SLLI x14, 48, x14;    
        rom[12] = 32'b0000000_00001_01111_101_01111_0010011; // SRLI x15, 48, x15;    
        rom[13] = 32'b0100000_00001_10000_101_10000_0010011; // SRAI x16, 48, x16;    

        rom[4] = 32'b0000000_00011_00000_000_10000_0100011; // sb x3, 16(x0);       
*/
        rom[0] = 32'b0000000_00011_00010_000_01000_1100011; // beq x2, x3, 8;       
        rom[2] = 32'b0000000_00011_00100_001_01000_1100011; // bne x4, x3, 8;       
        rom[4] = 32'b0000000_00101_00110_100_01000_1100011; // blt x5, x6, 8;       
        rom[6] = 32'b0000000_00110_00101_101_01000_1100011; // bge x6, x5, 8;       
        rom[8] = 32'b0000000_00100_00011_110_01000_1100011; // bltu x3, x4, 8;       
        rom[10] = 32'b0000000_00011_00100_111_01000_1100011; // bgeu x4, x3, 8;    
        /*   
        rom[6] = 32'b000000110000_00000_010_01001_0010011; // SLTI x9, 48, x0;      // skip
        rom[7] = 32'b000000110000_00000_011_01010_0010011; // SLTIU x10, 48, x0;    
        */
        rom[11] = 32'b00000000000000000001_01011_0110111; // lui x11, 1;    
        rom[12] = 32'b00000000000000000001_01100_0010111; // auipc x12, 1;    
        rom[13] = 32'b00000000100000000000_01101_1101111; // jal x13, 8;    
        rom[15] = 32'b000000000000_00000_000_01110_1100111; // jalr x14, 0(x0);    
    end               

    assign instr_code = rom[instr_mem_addr[31:2]];

endmodule